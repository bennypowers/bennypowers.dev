<script webc:setup>
  const hasStripe = slide =>
    slide.class?.match(/\bfooter\b|\bsidebar\b/);
</script>
<template shadowrootmode="open">
  <link rel="stylesheet" :href="url('/decks/devconf-brno-2023/shared.css')"/>
  <link rel="stylesheet" :href="url('/decks/devconf-brno-2023/components/dc23-slide.css')")"
  <div id="brno-container" :class="this.class ?? 'plain'">
    <slot id="title" name="title" webc:keep></slot>
    <div id="contents">
      <slot></slot>
      <slot name="feature" webc:if="this.class?.includes('feature')"></slot>
      <svg id="divider"
           webc:if="this.class?.includes('comparison')"
           version="1.1"
           xmlns="http://www.w3.org/2000/svg"
           viewBox="0 0 2 150">
        <line
          x1="1"
          x2="1"
          y1="1"
          y2="150"
          stroke="#b2b2b2"
          stroke-dasharray="8, 4, 2, 4"
          stroke-linecap="round"
          stroke-width="2"/>
      </svg>
    </div>
    <footer id="stripe" webc:if="hasStripe(this)">
      <img alt="devconf.cz" :src="url('/decks/devconf-brno-2023/devconf-logo.png')">
    </footer>
  </div>
  <slot hidden name="notes" webc:keep></slot>
</template>

<script type="module">
  import { SlidemSlide } from 'slidem/slidem-slide.js';
  class Dc23Slide extends SlidemSlide {
    connectedCallback() {
      super.connectedCallback();
      if (!HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot') || !HTMLTemplateElement.prototype.hasOwnProperty('shadowRootMode'))
        this.addEventListener('declarative-shadow-dom-stamped', this.afterStamp, { once: true });
      else
        this.afterStamp();
    }

    afterStamp() {
      this.defineSteps(this.shadowRoot.querySelectorAll('[reveal]') ?? [])
      const deck = this.closest('slidem-deck');
      const allSlides = Array.from(deck.querySelectorAll('*')).filter(x => x instanceof SlidemSlide);
      const notes = this.shadowRoot.querySelectorAll('[slot=notes]');
      for (const note of notes) {
        note.setAttribute('slide', allSlides.indexOf(this) + 1);
        deck.append(note);
      }
    }
  }
  customElements.define('dc23-slide', Dc23Slide);
</script>

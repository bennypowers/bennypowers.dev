---
title: Starting Functional JavaScript
description: |
  A short presentation on functional programming techniques using JavaScript
coverImage: /decks/starting-functional-javascript/images/cover.png
date: 2019-12
venue:
  name: Tech Talk @ Forter
tags:
  - deck
---
<slide-deck webc:nokeep
            webc:import="npm:eleventy-plugin-slide-decks"
            transition="slide-in slide-out"
            font="Open Sans Condensed"
            loading
            :@title="title"
            :@date="date"
            @tag="starting-functional-javascript">
  <slidem-slide slide-in center background="white">
    <h1>
      <span uppercase fit line-height="0.6" color="--secondary">Starting</span>
      <span uppercase fit line-height="0.8" color="--primary">Functional</span>
      <span uppercase fit line-height="0.8" color="--secondary">JavaScript</span>
    </h1>

    <p line-height="1.8">&nbsp;</p>

    <p fitcenter font-size="24px" color="black" style="float:right;">(Space or Arrow Keys to Navigate)</p>
  </slidem-slide>

  <slidem-slide id="pure-functions-header" slide-in darken-background="0.7" background="./images/red-heifer.jpg">
    <h2 fit uppercase color="--primary">Pure Functions</h2>
  </slidem-slide>

  <slidem-slide id="pure-functions" fade-in darken-background="0.7" background="./images/red-heifer.jpg">
    <p>Functions that have no <em>side effects</em> are said to be pure.</p>
    <p><em>Which of these functions is pure?</em></p>
    <syntax-highlight language="js"
                      reveal
                      webc:keep
                      webc:import="npm:@11ty/eleventy-plugin-syntaxhighlight">
      const add = (x, y) => x + y
    </syntax-highlight>
    <syntax-highlight language="js"
                      reveal
                      webc:keep
                      webc:import="npm:@11ty/eleventy-plugin-syntaxhighlight">
      const trace = (tag, x) => console.log(tag, x) || x
    </syntax-highlight>
    <syntax-highlight language="js"
                      reveal
                      webc:keep
                      webc:import="npm:@11ty/eleventy-plugin-syntaxhighlight">
      const getTime = () => Date.now()
    </syntax-highlight>
    <syntax-highlight language="js"
                      reveal
                      webc:keep
                      webc:import="npm:@11ty/eleventy-plugin-syntaxhighlight">
      const resolveUser = ({ token }, { userModel: { isValidToken, fetchUser } }) =>
        isValidToken(token)
          ? () => fetchUser(token)
          : async () => null

    </syntax-highlight>
  </slidem-slide>

  <slidem-slide id="pure-functions-about" fade-in darken-background="0.7" background="./images/red-heifer.jpg">
    <p line-height="2">
      Pure functions are
      <span reveal><em>useless,</em></span>
      <span reveal><em>easily tested</em>,</span>
      <span reveal>and <em>referentially transparent</em>.</span>
    </p>
    <zero-md large reveal src="markdown/pure-functions-5.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="currying-header" slide-in background="./images/curry.jpg">
    <h2 uppercase fit color="--secondary" line-height="1">Currying</h2>
    <p fit color="white">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
    <h3 uppercase fit color="--primary">Partial Application</h3>
  </slidem-slide>

  <slidem-slide id="curried-functions" fade-in background="./images/curry.jpg" darken-background="0.5">
    <h2 uppercase color="--primary">Curried Functions</h2>
    <p color="white">Take their arguments one at a time.</p>
    <zero-md large reveal src="markdown/curried-functions.md"></zero-md>
    <zero-md large reveal src="markdown/curried-functions-2.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="partial-application" fade-in background="./images/curry.jpg" darken-background="0.5">
    <h2 uppercase color="--primary">Partial Application</h2>
    <p color="white">Use closure to defer computation.</p>
    <zero-md large reveal src="markdown/partial-application-1.md"></zero-md>
    <zero-md large reveal src="markdown/partial-application-2.md"></zero-md>
    <p reveal color="white" style="margin-top:30px;">Partial application has many uses e.g. generic functions or fluent computations.</p>
  </slidem-slide>

  <slidem-slide id="composition" fade-in background="--primary">
    <h2 uppercase>Function Composition</h2>
    <div explanation floating>
      <p>Reduces many functions to one by applying each outer function to the application of the inner function.</p>
      <p reveal>In other words, makes one function from two (or more) others.</p>
    </div>
    <zero-md large reveal floating src="markdown/compose-binary.md"></zero-md>
    <zero-md reveal floating src="markdown/compose-examples.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="composition-class-mixins" fade-in background="--primary">
    <h2 uppercase>Use Case: Class Mixins</h2>
    <p explanation floating>JavaScript class mixins are a way to share behaviour among classes</p>
    <zero-md reveal floating src="markdown/class-mixins-1.md"></zero-md>
    <zero-md reveal floating src="markdown/class-mixins-2.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="pointfree" fade-in background="--primary">
    <h2 uppercase>Pointfree Style</h2>
    <p explanation floating>
      Functions which reference their own data are said to be "pointed".
      <span reveal>Likewise, functions which do not reference their parameters are said to be "pointfree".</span>
      <span reveal>With curried and point-free functions, always take your <em>data</em> as the <em>last</em> parameter.</span>
    </p>
    <zero-md large reveal floating src="markdown/pointfree-1.md"></zero-md>
    <zero-md large reveal floating src="markdown/pointfree-2.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="functors" background="--secondary">
    <h2 color="white">Functors</h2>
    <p color="white">
      A functor is a container for some value, like an envelope.
      <span reveal>Functors can map from some value <code>x</code> in a category to another value <code>y</code> in that same category.</span>
      <span reveal><code>Array</code> and <code>Promise</code> are both functors.</span>
    </p>
    <zero-md large reveal src="markdown/functors.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="crocks" fade-in background="--secondary">
    <div flex column center>
      <h2 uppercase color="--primary">Crocks</h2>
      <img fit src="./images/crocks.png" alt="https://evilsoft.github.io/crocks"/>
    </div>
  </slidem-slide>

  <slidem-slide id="crocks-helpers" fade-in background="--secondary">
    <h2 uppercase color="--primary">Crocks Helpers</h2>
    <zero-md large floating src="markdown/crocks-propOr-1.md"></zero-md>
    <zero-md large reveal floating src="markdown/crocks-propOr-2.md"></zero-md>
    <zero-md large reveal floating src="markdown/crocks-propPathOr.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="crocks-logic" fade-in background="--secondary">
    <h2 uppercase color="--primary">Crocks Logic</h2>
    <zero-md floating src="markdown/crocks-logic.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="crocks-curry" fade-in background="--secondary">
    <h2 uppercase color="--primary">Crocks Curry</h2>
    <p color="white">Crocks' curry is very flexible.</p>
    <zero-md large reveal floating src="markdown/crocks-curry.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="monoids" fade-in background="--primary">
    <h2 uppercase>Monoids</h2>
    <p>
      A monoid is a type which has an 'empty' value, and an operation to combine values.
      <span reveal>Combining a value with the 'empty' value always produces the same value.</span>
    </p>
    <ul>
      <li reveal>What is the empty value for numbers under addition?</li>
      <li reveal>Under multiplication?</li>
    </ul>
  </slidem-slide>

  <slidem-slide id="monoids-boolean" fade-in background="--primary">
    <h2>You're already using monoids!</h2>
    <ul>
      <li reveal><code>&&</code> forms a monoid with <code>true</code> as empty value</li>
      <li reveal><code>||</code> forms a monoid with <code>false</code> as empty value</li>
      <li reveal><code>String#concat</code> forms a monoid with <code>''</code> as empty value.</li>
      <li reveal><code>Object.assign</code> forms a monoid with <code>{}</code> as empty value</li>
      <li reveal><code>Array#concat</code> forms a monoid with <code>[]</code> as empty value</li>
    </ul>
  </slidem-slide>

  <slidem-slide id="monoids-mreduceMap" fade-in background="--primary">
    <h2><code>mreduceMap</code></h2>
    <p explanation floating>Folds an array under a monoid of your choice, first mapping your monoid constructor over it.</p>
    <zero-md reveal floating src="markdown/mreduceMap.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="monad" background="--secondary">
    <h2>Monad</h2>
    <p>
      Like a functor, Monads can map over their contents.
      <span reveal>Monads have the added ability to unwrap their self-similar contents.</span>
      <span reveal>This power is called <code>chain</code>, <code>bind</code>, or <code>flatMap</code></span>
    </p>
    <zero-md large reveal src="markdown/monads-array.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="maybe-monad" background="--primary">
    <h2>Maybe Monad</h2>
    <p explanation floating>
      The Maybe monad wraps a value which may not exist.
      <span reveal>It has two instances: <code>Just a</code> and <code>Nothing</code>.</span>
      <span reveal>Mapping over a <code>Just</code> works as expected.</span>
      <span reveal>Mapping over a <code>Nothing</code> skips execution.</span>
    </p>
    <zero-md reveal src="markdown/monads-maybe-chain.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="maybe-monad-chain" background="--primary">
    <h2>Maybe Monad - Binary</h2>
    <zero-md reveal src="markdown/monads-maybe.md"></zero-md>
  </slidem-slide>

  <slidem-slide id="maybe-monad-applicative" background="--primary">
    <h2>Maybe Monad - Binary</h2>
    <div explanation floating>
      <p>Wait!! People code like that?</p>
      <br/>
      <p reveal><strong><em>👉 NOPE 👈</em></strong></span></p>
      <br/>
      <br/>
      <p reveal>Monads are also applicatives, which means we can lift any function into 'monadic space' with <code>lift</code></p>
    </div>
    <zero-md reveal src="markdown/monads-maybe-applicative.md"></zero-md>
  </slidem-slide>

  <slidem-slide fade-in center background="white">
    <p fit color="--primary" uppercase>Thanks
      <span color="black">
        <a href="https://www.npmjs.com/package/slidem">For</a>
      </span>
    </p>
    <p fit color="--primary" uppercase>Watching!</p>
    <p color="black" uppercase><a href="https://evilSoft.github.io/crocks">Read More</a></p>
    <p style="text-align: right;">
      <a href="https://bennypowers.com">Benny Powers</a>
      <a href="https://github.com/bennypowers/starting-functional-javascript"><img class="avatar" src="images/github-logo.svg" alt="Github profile"></a>
      <a href="https://gitlab.com/bennyp"><img class="avatar" src="images/gitlab-logo.svg" alt="Gitlab profile"></a>
    </p>
  </slidem-slide>
</slide-deck>
<link rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      webc:keep>
<link rel="stylesheet" href="prism-atom-dark.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>


<style>
  :root {
    background: var(--primary);
    --primary: #7ED9D9;
    --secondary: #4362AA;
    --bottom-offset: 106px;
  }

  slidem-deck[loading] {
    display: none;
  }

  img[center] {
    margin: 0 auto;
  }

  h2 {
    line-height: 1.5;
  }

  h2 code {
    line-height: 1;
  }

  zero-md {
    background: #1d1f21;
    padding: 0 1em;
    font-size: 32px;
    border-radius: 0.5em;
    color: #c5c8c6;
    box-shadow: 10px 10px 100px black;
  }

  [bleed] {
    min-height: calc(100% - var(--bottom-offset))
  }

  [floating] {
    position: absolute;
    right: 0;
    left: 0;
    /* top: 96px; */
  }

  [active] {
    z-index: 1;
  }

  zero-md:not(:first-child):not([bleed]) {
    margin-top: 1em;
  }

  [explanation] {
    margin: 2em;
  }

  [fullheight] {
    height: 100%;
  }

  [right] {
    float: right;
  }

  [large] {
    font-size: 100%;
  }

  [flex] {
    display: flex;
  }

  [column] {
    flex-direction: column;
  }

  [center] {
    align-items: center;
  }

  [flex] h2 {
    align-self: flex-start;
  }

  .avatar {
    max-width: 36px;
  }

  noscript {
    font-family: "Open Sans Condensed";
    text-transform: uppercase;
  }

  noscript h1 {
    line-height: 0.8;
    color: white;
    display: table;
    white-space: nowrap;
    font-size: 23vw;
    max-width: 100vw;
  }

  noscript p {
    text-transform: uppercase;
    color: black;
    display: table;
    white-space: nowrap;
    font-size: 6vw;
  }

  #pure-functions-header h2 {
    margin-top: 60vh;
  }

  #pure-functions,
  #pure-functions-about,
  #currying-header {
    color: white;
  }

  #currying-header h2 {
    background: rgba(255, 255, 255, 0.5)
  }

  #currying-header h3 {
    background: rgba(0,0,0,0.5)
  }

  #monad {
    color: white;
  }

  #crocks img {
    width: 80%;
  }
</style>


<noscript>
  <h1>
    <span uppercase fit line-height="0.8" color="white">Starting</span>
    <span uppercase fit line-height="0.8" color="black">Functional</span>
    <span uppercase fit line-height="0.8" color="white">JavaScript</span>
  </h1>

  <p line-height="1.8">&nbsp;</p>

  <p uppercase fit color="black">A Wee Catch Up On the Language</p>
  <p uppercase fit color="white">you Thought you Knew</p>

  <p line-height="1.8">&nbsp;</p>

  This presentation relies on JavaScript. Please consider enabling JavaScript for this site.
</noscript>

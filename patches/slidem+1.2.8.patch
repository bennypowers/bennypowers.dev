diff --git a/node_modules/slidem/slidem-deck.js b/node_modules/slidem/slidem-deck.js
index 503d779..26fefb1 100644
--- a/node_modules/slidem/slidem-deck.js
+++ b/node_modules/slidem/slidem-deck.js
@@ -4,7 +4,8 @@ import { onRouteChange, currentPath, currentQuery, currentHash } from '../@gluon
 import '../fontfaceobserver/fontfaceobserver.standalone.js';
 import '../@gluon/keybinding/gluon-keybinding.js';
 
-const styleText = document.createTextNode(`
+const globalStyleSheet = new CSSStyleSheet();
+globalStyleSheet.replaceSync(`
   /* SLIDEM GLOBAL STYLES */
   body {
     margin: 0;
@@ -17,72 +18,279 @@ const styleText = document.createTextNode(`
 
   /* Keyframes are defined here to patch a scoping bug in Chrome */
   @keyframes slidem-fade-in {
-    from {
-      opacity: 0;
-    }
-    to {
-      opacity: 1;
-    }
+    from { opacity: 0; }
+    to { opacity: 1; }
   }
 
   @keyframes slidem-fade-out {
-    from {
-      opacity: 1;
-    }
-    to {
-      opacity: 0;
-    }
+    from { opacity: 1; }
+    to { opacity: 0; }
   }
 
   @keyframes slidem-slide-in-forward {
-    from {
-      transform: translateX(100vw);
-    }
-    to {
-      transform: translateX(0);
-    }
+    from { translate: 100vw 0; }
+    to { translate: 0 0; }
   }
 
   @keyframes slidem-slide-in-backward {
-    from {
-      transform: translateX(0);
-    }
-    to {
-      transform: translateX(100vw);
-    }
+    from { translate: 0 0; }
+    to { translate: 100vw 0; }
   }
 
   @keyframes slidem-slide-out-forward {
-    from {
-      transform: translateX(0);
-    }
-    to {
-      transform: translateX(-100vw);
-    }
+    from { translate: 0 0; }
+    to { translate: -100vw 0; }
   }
 
   @keyframes slidem-slide-out-backward {
-    from {
-      transform: translateX(-100vw);
-    }
-    to {
-      transform: translateX(0);
-    }
+    from { translate: -100vw 0; }
+    to { translate: 0 0; }
   }
 `);
 
-const styleNode = document.createElement('style');
-styleNode.appendChild(styleText);
-document.head.appendChild(styleNode);
+document.adoptedStyleSheets = [...document.adoptedStyleSheets, globalStyleSheet];
+
+const styleSheet = new CSSStyleSheet();
+styleSheet.replaceSync(`
+  :host {
+    /* inset for active slide */
+    --active-inset-block-start: calc(25% - 20px);
+    --active-inset-block-end: calc(25% - 20px);
+    --active-inset-inline-start: calc(5% - 20px);
+    --active-inset-inline-end: calc(45% - 20px);
+
+    /* inset for next slide */
+    --presenter-inset-block-start: calc(32.5% - 20px);
+    --presenter-inset-block-end: calc(32.5% - 20px);
+    --presenter-inset-inline-start: calc(60.5% - 20px);
+    --presenter-inset-inline-end: calc(4.5% - 20px);
+  }
+
+  @keyframes slidem-fade-in {
+    from { opacity: 0; }
+    to { opacity: 1; }
+  }
+
+  @keyframes slidem-fade-out {
+    from { opacity: 1; }
+    to { opacity: 0; }
+  }
+
+  @keyframes slidem-slide-in-forward {
+    from { translate: 100vw 0; }
+    to { translate: 0 0; }
+  }
+
+  @keyframes slidem-slide-in-backward {
+    from { translate: 0 0; }
+    to { translate: 100vw 0; }
+  }
+
+  @keyframes slidem-slide-out-forward {
+    from { translate: 0 0; }
+    to { translate: -100vw 0; }
+  }
+
+  @keyframes slidem-slide-out-backward {
+    from { translate: -100vw 0; }
+    to { translate: 0 0; }
+  }
+
+  :host {
+    display: block;
+    overflow: hidden;
+    position: absolute;
+    inset: 0 0 0 0;
+    font-family: 'sans-serif';
+    font-size: 56px;
+    line-height: 1;
+  }
+
+  .slides ::slotted(*) {
+    position: absolute;
+    inset: 0 0 0 0;
+    animation-duration: 0.4s;
+    animation-fill-mode: both;
+    animation-timing-function: ease-in-out;
+  }
+
+  .slides ::slotted(:not([active]):not([previous]):not([next])) {
+    display: none;
+  }
+
+  :host(:not([presenter])) .slides ::slotted([next]:not([previous])) {
+    display: none;
+  }
+
+  #progress {
+    position: absolute;
+    inset-block-end: 0;
+    inset-inline-start: 0;
+    inset-inline-end: 0;
+    height: 50px;
+    text-align: center;
+    display: flex;
+    flex-flow: row;
+    justify-content: center;
+    z-index: 10;
+  }
+
+  #progress div {
+    height: 8px;
+    width: 8px;
+    border-radius: 50%;
+    border: 2px solid white;
+    margin-left: 6px;
+    margin-right: 6px;
+    background: transparent;
+    transition: background 0.2s, scale 0.2s;
+  }
+
+  #progress div.active {
+    background: white;
+    scale: 1.3
+  }
+
+  :host([progress="dark"]) #progress div {
+    border: 2px solid black;
+  }
+
+  :host([progress="dark"]) #progress div.active {
+    background: black;
+  }
+
+  :host([progress="none"]) #progress {
+    display: none;
+  }
+
+  #timer {
+    display: none;
+    position: absolute;
+    inset-block-start: 5%;
+    inset-inline-end: 5%;
+    color: white;
+    font-size: 4vw;
+    font-weight: bold;
+    font-family: Helvetica, Arial, sans-serif;
+  }
+
+  :host([presenter]) #timer {
+    display: inline;
+  }
+
+  :host([presenter]) {
+    background: black;
+  }
+
+  /* White box around active slide */
+  :host([presenter])::before,
+  :host([presenter])::after {
+    display: block;
+    position: absolute;
+    content: '';
+    border: 2px solid white;
+  }
+
+  :host([presenter])::before {
+    inset-block: var(--active-inset-block-start) var(--active-inset-block-end);
+    inset-inline: var(--active-inset-inline-start) var(--active-inset-inline-end);
+  }
+
+  /* White box around next slide */
+  :host([presenter])::after {
+    inset-block: var(--presenter-inset-block-start) var(--presenter-inset-block-end);
+    inset-inline: var(--presenter-inset-inline-start) var(--presenter-inset-inline-end);
+  }
+
+  :host([presenter]) .slides ::slotted(*) {
+    animation: none !important; /* Block user-configured animations */
+  }
+
+  :host([presenter]) .slides ::slotted([previous]:not([next])) {
+    display: none;
+  }
+
+  :host([presenter]) .slides ::slotted([active]) {
+    translate: -20% 0;
+    scale: 0.5 !important; /* Force presenter layout */
+  }
+
+  :host([presenter]) .slides ::slotted([next]) {
+    translate: 28% 0;
+    scale: 0.35 !important; /* Force presenter layout */
+  }
+
+  :host([presenter]) #progress {
+    translate: -20% 25vh;
+    scale: 0.5;
+  }
+
+  #notes {
+    font-size: 18px;
+    position: absolute;
+    inset-block-start: calc(var(--presenter-inset-block-start) + var(--presenter-inset-block-end) + 80px);
+    inset-inline-start: var(--presenter-inset-inline-start);
+  }
+
+  :host(:not([presenter])) #notes,
+  #notes ::slotted(:not([active])) {
+    display: none !important;
+  }
+
+  .slides ::slotted([active]) {
+    z-index: 2;
+  }
+
+  .slides ::slotted([previous]) {
+    z-index: 0;
+  }
+
+  .slides ::slotted([fade-in][active].animate-forward) {
+    animation-name: slidem-fade-in;
+  }
+
+  .slides ::slotted([fade-in][previous].animate-backward) {
+    animation-name: slidem-fade-out;
+    z-index: 3;
+  }
+
+  .slides ::slotted([fade-out][active].animate-backward) {
+    animation-name: slidem-fade-in;
+  }
+
+  .slides ::slotted([fade-out][previous].animate-forward) {
+    animation-name: slidem-fade-out;
+    z-index: 3;
+  }
+
+  .slides ::slotted([slide-in][active].animate-forward) {
+    animation-name: slidem-slide-in-forward;
+  }
+
+  .slides ::slotted([slide-in][previous].animate-backward) {
+    animation-name: slidem-slide-in-backward;
+    z-index: 3;
+  }
+
+  .slides ::slotted([slide-out][active].animate-backward) {
+    animation-name: slidem-slide-out-backward;
+  }
+
+  .slides ::slotted([slide-out][previous].animate-forward) {
+    animation-name: slidem-slide-out-forward;
+    z-index: 3;
+  }
+`);
 
 export class SlidemDeck extends GluonElement {
   get template() {
     return html`
-      <div class="slides">
+      <div class="slides" part="slides">
         <slot id="slides"></slot>
       </div>
-      <div id="progress"></div>
-      <div id="timer"></div>
+      <div id="progress" part="progress"><slot name="progress" id="progressSlot"></slot></div>
+      <div id="notes" part="notes"><slot name="notes"></slot></div>
+      <div id="timer" part="timer"></div>
       <gluon-keybinding id="timerToggle" key="t"></gluon-keybinding>
       <gluon-keybinding id="presenterToggle" key="p"></gluon-keybinding>
       <div id="forward">
@@ -97,215 +305,6 @@ export class SlidemDeck extends GluonElement {
         <gluon-keybinding key="Left"></gluon-keybinding>
         <slot name="backward"></slot>
       </div>
-      <style>
-        @keyframes slidem-fade-in {
-          from {
-            opacity: 0;
-          }
-          to {
-            opacity: 1;
-          }
-        }
-
-        @keyframes slidem-fade-out {
-          from {
-            opacity: 1;
-          }
-          to {
-            opacity: 0;
-          }
-        }
-
-        @keyframes slidem-slide-in-forward {
-          from {
-            transform: translateX(100vw);
-          }
-          to {
-            transform: translateX(0);
-          }
-        }
-
-        @keyframes slidem-slide-in-backward {
-          from {
-            transform: translateX(0);
-          }
-          to {
-            transform: translateX(100vw);
-          }
-        }
-
-        @keyframes slidem-slide-out-forward {
-          from {
-            transform: translateX(0);
-          }
-          to {
-            transform: translateX(-100vw);
-          }
-        }
-
-        @keyframes slidem-slide-out-backward {
-          from {
-            transform: translateX(-100vw);
-          }
-          to {
-            transform: translateX(0);
-          }
-        }
-        :host {
-          display: block;
-          overflow: hidden;
-          position: absolute;
-          top: 0;
-          left: 0;
-          bottom: 0;
-          right: 0;
-          font-family: 'sans-serif';
-          font-size: 56px;
-          line-height: 1;
-        }
-
-        .slides ::slotted(*) {
-          position: absolute;
-          top: 0;
-          right: 0;
-          bottom: 0;
-          left: 0;
-          animation-duration: 0.4s;
-          animation-fill-mode: both;
-          animation-timing-function: ease-in-out;
-        }
-
-        .slides ::slotted(:not([active]):not([previous]):not([next])) {
-          display: none;
-        }
-
-        :host(:not([presenter])) .slides ::slotted([next]:not([previous])) {
-          display: none;
-        }
-
-        #progress {
-          position: absolute;
-          bottom: 0px;
-          left: 0;
-          right: 0;
-          height: 50px;
-          text-align: center;
-          display: flex;
-          flex-flow: row;
-          justify-content: center;
-          z-index: 10;
-        }
-        #progress div {
-          height: 8px;
-          width: 8px;
-          border-radius: 50%;
-          border: 2px solid white;
-          margin-left: 6px;
-          margin-right: 6px;
-          background: transparent;
-          transition: background 0.2s, transform 0.2s;
-        }
-        #progress div.active {
-          background: white;
-          transform: scale(1.3);
-        }
-        :host([progress="dark"]) #progress div {
-          border: 2px solid black;
-        }
-        :host([progress="dark"]) #progress div.active {
-          background: black;
-        }
-        :host([progress="none"]) #progress {
-          display: none;
-        }
-
-        #timer {
-          display: none;
-          position: absolute;
-          top: 5%;
-          right: 5%;
-          color: white;
-          font-size: 4vw;
-          font-weight: bold;
-          font-family: Helvetica, Arial, sans-serif;
-        }
-        :host([presenter]) #timer {
-          display: inline;
-        }
-
-        :host([presenter]) {
-          background: black;
-        }
-        /* White box around active slide */
-        :host([presenter])::before {
-          display: block;
-          position: absolute;
-          content: '';
-          top: calc(25% - 20px);
-          right:  calc(45% - 20px);
-          bottom:  calc(25% - 20px);
-          left:  calc(5% - 20px);
-          border: 2px solid white;
-        }
-        /* White box around next slide */
-        :host([presenter])::after {
-          display: block;
-          position: absolute;
-          content: '';
-          top: calc(32.5% - 20px);
-          right: calc(4.5% - 20px);
-          bottom: calc(32.5% - 20px);
-          left: calc(60.5% - 20px);
-          border: 2px solid white;
-        }
-        :host([presenter]) .slides ::slotted(*) {
-          animation: none !important; /* Block user-configured animations */
-        }
-        :host([presenter]) .slides ::slotted([previous]:not([next])) {
-          display: none;
-        }
-        :host([presenter]) .slides ::slotted([active]) {
-          transform: translate(-20%, 0) scale(0.5) !important; /* Force presenter layout */
-        }
-        :host([presenter]) .slides ::slotted([next]) {
-          transform: translate(28%, 0) scale(0.35) !important; /* Force presenter layout */
-        }
-
-        .slides ::slotted([active]) {
-          z-index: 2;
-        }
-        .slides ::slotted([previous]) {
-          z-index: 0;
-        }
-        .slides ::slotted([fade-in][active].animate-forward) {
-          animation-name: slidem-fade-in;
-        }
-        .slides ::slotted([fade-in][previous].animate-backward) {
-          animation-name: slidem-fade-out;
-          z-index: 3;
-        }
-        .slides ::slotted([fade-out][active].animate-backward) {
-          animation-name: slidem-fade-in;
-        }
-        .slides ::slotted([fade-out][previous].animate-forward) {
-          animation-name: slidem-fade-out;
-          z-index: 3;
-        }
-        .slides ::slotted([slide-in][active].animate-forward) {
-          animation-name: slidem-slide-in-forward;
-        }
-        .slides ::slotted([slide-in][previous].animate-backward) {
-          animation-name: slidem-slide-in-backward;
-          z-index: 3;
-        }
-        .slides ::slotted([slide-out][active].animate-backward) {
-          animation-name: slidem-slide-out-backward;
-        }
-        .slides ::slotted([slide-out][previous].animate-forward) {
-          animation-name: slidem-slide-out-forward;
-          z-index: 3;
-        }
-      </style>
     `;
   }
 
@@ -321,8 +320,15 @@ export class SlidemDeck extends GluonElement {
     }
   }
 
+  get activeSlide() {
+    return this.slides?.[this.currentSlide] ?? null;
+  }
+
   connectedCallback() {
     super.connectedCallback();
+    this.shadowRoot.adoptedStyleSheets = [...this.shadowRoot.adoptedStyleSheets, styleSheet];
+    // cache the document title
+    this._originalTitle = document.title;
 
     // Initialize presenter mode based on the '?presenter' query being present
     this.presenter = currentQuery() === 'presenter';
@@ -350,8 +356,12 @@ export class SlidemDeck extends GluonElement {
     this.slides = Array.from(this.children).filter(item => !item.hasAttribute('slot'));
 
     // Create dots for progress bar
-    this.slides.forEach(() => {
-      this.$.progress.appendChild(document.createElement('div'));
+    this.slides.forEach((slide, i) => {
+      this.$.progressSlot.appendChild(document.createElement('div'));
+      slide.querySelectorAll('[slot="notes"]').forEach(note => {
+        note.setAttribute('slide', i + 1);
+        this.appendChild(note);
+      });
     });
 
     /**
@@ -360,24 +370,43 @@ export class SlidemDeck extends GluonElement {
      * Handles route changes and displays / animates the slides by changing classes and attributes
      */
     onRouteChange(() => {
-      this.slides[this.currentSlide].step = this.currentStep + 1;
-      this.slides[this.currentSlide].setAttribute('active', '');
+      this.activeSlide.step = this.currentStep + 1;
+      this.activeSlide.setAttribute('active', '');
+
+      if (this.presenter) {
+        // set the `active` attr on any notes for this slide
+        this.$.notes
+          .querySelector('slot')
+          .assignedElements()
+          .forEach((note) =>
+            note.toggleAttribute('active', note.getAttribute('slide') == this.currentSlide + 1));
+      }
 
       if (this.previousSlide === this.currentSlide) {
         return;
       }
 
+      if (this.autoTimer)
+        clearInterval(this.autoTimer);
+
+      if (this.activeSlide.auto) {
+        this.autoTimer = setInterval(() => {
+          const { steps, step } = this.activeSlide;
+          this.activeSlide.step = (step === steps + 1) ? 1 : step + 1;
+        }, this.activeSlide.auto);
+      }
+
       if (this.previousSlide !== undefined) {
         if (this.previousSlide < this.currentSlide) {
           this.slides[this.previousSlide].classList.add('animate-forward');
-          this.slides[this.currentSlide].classList.add('animate-forward');
+          this.activeSlide.classList.add('animate-forward');
           this.slides[this.previousSlide].classList.remove('animate-backward');
-          this.slides[this.currentSlide].classList.remove('animate-backward');
+          this.activeSlide.classList.remove('animate-backward');
         } else {
           this.slides[this.previousSlide].classList.add('animate-backward');
-          this.slides[this.currentSlide].classList.add('animate-backward');
+          this.activeSlide.classList.add('animate-backward');
           this.slides[this.previousSlide].classList.remove('animate-forward');
-          this.slides[this.currentSlide].classList.remove('animate-forward');
+          this.activeSlide.classList.remove('animate-forward');
         }
       }
 
@@ -398,11 +427,11 @@ export class SlidemDeck extends GluonElement {
       if (this.previousSlide !== undefined) {
         this.slides[this.previousSlide].removeAttribute('active');
         this.slides[this.previousSlide].setAttribute('previous', '');
-        this.$.progress.children[this.previousSlide].classList.remove('active');
+        this.$.progressSlot.children[this.previousSlide].classList.remove('active');
         this.oldPreviousSlide = this.previousSlide;
       }
 
-      this.$.progress.children[this.currentSlide].classList.add('active');
+      this.$.progressSlot.children[this.currentSlide].classList.add('active');
 
       this.previousSlide = this.currentSlide;
     });
@@ -411,6 +440,10 @@ export class SlidemDeck extends GluonElement {
       path = window.history.pushState({}, '', `${path}${(query && '?' + query) || ''}${(hash && '#' + hash) || ''}`);
       window.dispatchEvent(new Event('location-changed'));
       localStorage.setItem('location', currentHash());
+      if (this.activeSlide.hasAttribute('name'))
+        document.title = this.activeSlide.getAttribute('name') + ' | ' + this._originalTitle;
+      else
+        document.title = this._originalTitle;
     };
 
     /**
@@ -419,16 +452,16 @@ export class SlidemDeck extends GluonElement {
      * The 'forward' and 'backward' elements handle click events and navigate to the next/previous step/slide
      */
     this.$.forward.onclick = () => {
-      if (this.slides[this.currentSlide].steps && this.slides[this.currentSlide].step <= this.slides[this.currentSlide].steps) {
-        changeLocation({ hash: `slide-${this.currentSlide + 1}/step-${this.slides[this.currentSlide].step + 1}` });
+      if (this.activeSlide.steps && this.activeSlide.step <= this.activeSlide.steps) {
+        changeLocation({ hash: `slide-${this.currentSlide + 1}/step-${this.activeSlide.step + 1}` });
       } else if (this.currentSlide < this.slides.length - 1) {
         changeLocation({ hash: `slide-${this.currentSlide + 2}/step-1` });
       }
     };
 
     this.$.backward.onclick = () => {
-      if (this.slides[this.currentSlide].steps && this.slides[this.currentSlide].step > 1) {
-        changeLocation({ hash: `slide-${this.currentSlide + 1}/step-${this.slides[this.currentSlide].step - 1}` });
+      if (this.activeSlide.steps && this.activeSlide.step > 1) {
+        changeLocation({ hash: `slide-${this.currentSlide + 1}/step-${this.activeSlide.step - 1}` });
       } else if (this.currentSlide > 0) {
         changeLocation({ hash: `slide-${this.currentSlide}/step-${(this.slides[this.currentSlide - 1].steps || 0) + 1}` });
       }
@@ -551,3 +584,4 @@ const __timer = begin => {
 };
 
 customElements.define(SlidemDeck.is, SlidemDeck);
+
diff --git a/node_modules/slidem/slidem-slide-base.js b/node_modules/slidem/slidem-slide-base.js
index a36279d..970d9ae 100644
--- a/node_modules/slidem/slidem-slide-base.js
+++ b/node_modules/slidem/slidem-slide-base.js
@@ -1,102 +1,104 @@
 import { GluonElement, html } from '../@gluon/gluon/gluon.js';
 
-const styleText = document.createTextNode(`
+const globalStyles = new CSSStyleSheet();
+globalStyles.replaceSync(`
   /* SLIDEM SLIDE GLOBAL STYLES */
 
   [reveal] {
     opacity: 0;
     transition: opacity 0.2s;
   }
+
+  [current],
+  [past] {
+    opacity: 1;
+  }
 `);
 
-const styleNode = document.createElement('style');
-styleNode.appendChild(styleText);
-document.head.appendChild(styleNode);
-
-const slidemStyle = html`
-  <style>
-    :host {
-      display: flex;
-      flex-direction: row;
-      overflow: hidden;
-      align-items: center;
-      background-size: cover;
-      background-position: center;
-    }
+document.adoptedStyleSheets = [...document.adoptedStyleSheets, globalStyles];
+
+const styleSheet = new CSSStyleSheet();
+styleSheet.replaceSync(`
+  :host {
+    display: flex;
+    flex-direction: row;
+    overflow: hidden;
+    align-items: center;
+    background: var(--background);
+    background-size: cover;
+    background-position: center;
+  }
 
-    :host([zoom-in]) #content, :host([zoom-out]) #content {
-      animation-duration: 0.4s;
-      animation-fill-mode: both;
-      animation-timing-function: ease-in-out;
-    }
+  :host([zoom-in]) #content, :host([zoom-out]) #content {
+    animation-duration: 0.4s;
+    animation-fill-mode: both;
+    animation-timing-function: ease-in-out;
+  }
 
-    @keyframes zoom-in {
-      from {
-        opacity: 0;
-        transform: scale(0);
-      }
-      to {
-        opacity: 1;
-        transform: scale(var(--slidem-content-scale, 1));
-      }
+  @keyframes zoom-in {
+    from {
+      opacity: 0;
+      scale: 0;
     }
-
-    @keyframes zoom-out {
-      from {
-        opacity: 1;
-        transform: scale(var(--slidem-content-scale, 1));
-      }
-      to {
-        opacity: 0;
-        transform: scale(0);
-      }
+    to {
+      opacity: 1;
+      scale: var(--slidem-content-scale, 1);
     }
+  }
 
-    :host([zoom-in][active].animate-forward) #content {
-      animation-name: zoom-in;
+  @keyframes zoom-out {
+    from {
+      opacity: 1;
+      scale: var(--slidem-content-scale, 1);
     }
-
-    :host([zoom-in][previous].animate-backward) #content {
-      animation-name: zoom-out;
+    to {
+      opacity: 0;
+      scale: 0;
     }
+  }
 
-    :host([zoom-out][previous].animate-forward) #content {
-      animation-name: zoom-out;
-    }
+  :host([zoom-in][active].animate-forward) #content {
+    animation-name: zoom-in;
+  }
 
-    :host([zoom-out][active].animate-backward) #content {
-      animation-name: zoom-in;
-    }
+  :host([zoom-in][previous].animate-backward) #content {
+    animation-name: zoom-out;
+  }
 
-    #iefix {
-      width: 100%;
-      display: flex;
-      flex-direction: column;
-      align-items: center;
-    }
+  :host([zoom-out][previous].animate-forward) #content {
+    animation-name: zoom-out;
+  }
 
-    #content {
-      width: var(--slidem-content-width, 1760px);
-      max-height: var(--slidem-content-height, 990px);
-      flex-shrink: 0;
-    }
+  :host([zoom-out][active].animate-backward) #content {
+    animation-name: zoom-in;
+  }
 
-    :host(:not([center])) #content {
-      height: var(--slidem-content-height, 990px);
-    }
-  </style>
-`;
+  #iefix {
+    width: 100%;
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+  }
+
+  #content {
+    width: var(--slidem-content-width, 1760px);
+    max-height: var(--slidem-content-height, 990px);
+    flex-shrink: 0;
+  }
+
+  :host(:not([center])) #content {
+    height: var(--slidem-content-height, 990px);
+  }
+`);
 
 export class SlidemSlideBase extends GluonElement {
   get template() {
     if (this.getAttribute('fullscreen') !== null || this.constructor.fullscreen) {
       return html`
-        ${slidemStyle}
         ${(this.constructor.name !== 'SlidemSlide' && this.content) || html`<slot id="slot"></slot>`}
       `;
     } else {
       return html`
-        ${slidemStyle}
         <div id="iefix" part="container">
           <div id="content" part="content">
             ${(this.constructor.name !== 'SlidemSlide' && this.content) || html`<slot id="slot"></slot>`}
@@ -106,22 +108,27 @@ export class SlidemSlideBase extends GluonElement {
     }
   }
 
+  #steps = Array.from(this.querySelectorAll('[reveal]'));
+
   connectedCallback() {
     super.connectedCallback();
-    this._steps = Array.from(this.querySelectorAll('[reveal]'));
-    this.steps = this._steps.length;
-    this.__resizeContent();
+    this.shadowRoot.adoptedStyleSheets = [...this.shadowRoot.adoptedStyleSheets, styleSheet];
+    this.steps = this.#steps.length;
+    this.#resizeContent();
+    this.#steps.forEach((step, i) => step.setAttribute('step', i + 2));
+    if (this.#steps.length)
+      this.#steps[0].previousElementSibling?.setAttribute('step', 1);
     let resizeTimeout;
     window.addEventListener('resize', () => {
       window.clearTimeout(resizeTimeout);
       resizeTimeout = window.setTimeout(() => {
-        this.__resizeContent();
+        this.#resizeContent();
       }, 200);
     });
   }
 
   static get observedAttributes() {
-    return ['step'];
+    return ['auto', 'step'];
   }
 
   attributeChangedCallback(attr, oldVal, newVal) {
@@ -131,10 +138,24 @@ export class SlidemSlideBase extends GluonElement {
         this.setAttribute('step', this.steps + 1);
         return;
       }
-      this.__setStep(step);
+      this.#setStep(step);
     }
   }
 
+  get auto() {
+    if (!this.hasAttribute('auto'))
+      return false;
+    else
+      return parseInt(this.getAttribute('auto')) || 5000;
+  }
+
+  set auto(v) {
+    if (!(typeof v === 'number') || Number.isNaN(v))
+      this.removeAttribute('auto');
+    else
+      this.setAttribute('auto', v.toString())
+  }
+
   set step(step) {
     this.setAttribute('step', step);
   }
@@ -143,27 +164,29 @@ export class SlidemSlideBase extends GluonElement {
     return Number(this.getAttribute('step')) || 1;
   }
 
-  __setStep(newStep) {
-    this._steps.forEach((step, i) => {
-      if (i < newStep - 1) {
-        step.style.opacity = 1;
-      } else {
-        step.style.opacity = 0;
-      }
+  #setStep(step) {
+    this.querySelector('[step="1"]')?.toggleAttribute?.('past', step > 1);
+    this.#steps.forEach((el, i) => {
+      const elStep = i + 2;
+      const past = elStep < step;
+      const current = elStep === step;
+      el.toggleAttribute('past', past);
+      el.toggleAttribute('current', current);
     });
   }
 
-  __resizeContent() {
+  #resizeContent() {
     const documentStyle = window.getComputedStyle(document.documentElement);
     const width = Number((documentStyle.getPropertyValue('--slidem-content-width') || '1760px').slice(0, -2));
     const height = Number((documentStyle.getPropertyValue('--slidem-content-height') || '990px').slice(0, -2));
     const scale = Math.min(window.innerHeight / 1.09 / height, window.innerWidth / 1.09 / width);
     if (scale < 1) {
       document.documentElement.style.setProperty('--slidem-content-scale', scale);
-      this.$.content && (this.$.content.style.transform = `scale(${scale})`);
+      this.$.content?.style?.setProperty('scale', scale);
     } else {
       document.documentElement.style.setProperty('--slidem-content-scale', 1);
-      this.$.content && (this.$.content.style.transform = `scale(1)`);
+      this.$.content?.style?.setProperty('scale', 1);
     }
   }
 }
+
diff --git a/node_modules/slidem/slidem-slide.js b/node_modules/slidem/slidem-slide.js
index 4cdc5a1..08359c7 100644
--- a/node_modules/slidem/slidem-slide.js
+++ b/node_modules/slidem/slidem-slide.js
@@ -1,6 +1,7 @@
 import { SlidemSlideBase } from './slidem-slide-base.js';
 
-const styleText = document.createTextNode(`
+const globalStyleSheet = new CSSStyleSheet();
+globalStyleSheet.replaceSync(`
   /* SLIDEM BASIC SLIDE STYLE */
   slidem-slide h1,
   slidem-slide h2,
@@ -19,22 +20,15 @@ const styleText = document.createTextNode(`
   }
 `);
 
-const styleNode = document.createElement('style');
-styleNode.appendChild(styleText);
-document.head.appendChild(styleNode);
+document.adoptedStyleSheets = [...document.adoptedStyleSheets, globalStyleSheet];
 
 export class SlidemSlide extends SlidemSlideBase {
   connectedCallback() {
     super.connectedCallback();
     const background = this.getAttribute('background');
     if (background) {
-      if (background.match(/^--[a-zA-Z-]*$/)) {
-        // Workaround for IE11 lacking CSS variables
-        if (window.ShadyCSS && window.ShadyCSS.variables) {
-          this.style.background = window.ShadyCSS.variables[background];
-        } else {
-          this.style.background = `var(${background})`;
-        }
+      if (background.match(/^--/)) {
+        this.style.setProperty('--background', `var(${background})`);
       } else if (background.match(/^(http|\/|\.)/)) {
         let image = `url(${background})`;
         const darken = this.getAttribute('darken-background');
@@ -43,42 +37,37 @@ export class SlidemSlide extends SlidemSlideBase {
         }
         this.style.backgroundImage = image;
       } else {
-        this.style.background = background;
+        this.style.setProperty('--background', background);
       }
     }
 
-    this.textNodes = Array.from(this.querySelectorAll('h1, h2, h3, h4, h5, h6, p, li, span'));
+    this.textNodes = Array.from(this.querySelectorAll('h1, h2, h3, h4, h5, h6, p, li, span, em, strong, small'));
     this.textNodes.forEach(textNode => {
-      if (textNode.getAttribute('font-size') !== null) {
+      if (textNode.hasAttribute('font-size')) {
         textNode.style.fontSize = textNode.getAttribute('font-size');
       }
-      if (textNode.getAttribute('bold') !== null) {
+      if (textNode.hasAttribute('bold')) {
         textNode.style.fontWeight = 'bold';
       }
-      if (textNode.getAttribute('underline') !== null) {
+      if (textNode.hasAttribute('underline')) {
         textNode.style.textDecoration = 'underline';
       }
-      if (textNode.getAttribute('italic') !== null) {
+      if (textNode.hasAttribute('italic')) {
         textNode.style.fontStyle = 'italic';
       }
-      if (textNode.getAttribute('uppercase') !== null) {
+      if (textNode.hasAttribute('uppercase')) {
         textNode.style.textTransform = 'uppercase';
       }
-      if (textNode.getAttribute('center') !== null) {
+      if (textNode.hasAttribute('center')) {
         textNode.style.textAlign = 'center';
       }
-      if (textNode.getAttribute('line-height') !== null) {
+      if (textNode.hasAttribute('line-height')) {
         textNode.style.lineHeight = textNode.getAttribute('line-height');
       }
       const color = textNode.getAttribute('color');
       if (color !== null) {
-        if (color.match(/^--[a-zA-Z-]*$/)) {
-          // Workaround for IE11 lacking CSS variables
-          if (window.ShadyCSS && window.ShadyCSS.variables) {
-            textNode.style.color = window.ShadyCSS.variables[color];
-          } else {
-            textNode.style.color = `var(${color})`;
-          }
+        if (color.match(/^--$/)) {
+          textNode.style.color = `var(${color})`;
         } else {
           textNode.style.color = color;
         }
@@ -103,14 +92,16 @@ export class SlidemSlide extends SlidemSlideBase {
 
   attributeChangedCallback(attr, oldVal, newVal) {
     super.attributeChangedCallback(attr, oldVal, newVal);
+    if (attr === 'active' && newVal != null)
+      this.dispatchEvent(new Event('activated'));
     if (attr === 'active' || attr === 'next') {
       if (newVal !== null) {
-        this.__rescale();
+        this.#rescale();
       }
     }
   }
 
-  __rescale() {
+  #rescale() {
     requestAnimationFrame(() => {
       this.textNodes.forEach(textNode => {
         if (textNode.getAttribute('fit') !== null) {
@@ -126,3 +117,4 @@ export class SlidemSlide extends SlidemSlideBase {
 }
 
 customElements.define(SlidemSlide.is, SlidemSlide);
+
